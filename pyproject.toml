[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "alethia"
version = "0.1.0"
description = "Package to perform fuzzy matching using language models." 
readme = "README.rst"
authors = [
  {name = "Saket Choudhary", email = "saketkc@gmail.com"}
]
maintainers = [
  {name = "Saket Choudhary", email = "saketkc@gmail.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",  
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
license = {text = "MIT license"}
requires-python = ">=3.8"

dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "tqdm>=4.60.0",
    "psutil>=5.8.0",  
]

[project.optional-dependencies]

cpu = [
    "fastembed>=0.6.1", 
    "rapidfuzz>=3.0.0",
    "faiss-cpu>=1.7.0", 
    "numba>=0.56.0",  
]

gpu = [
    "sentence-transformers>=3.0.0",
    "torch>=2.0.0",
    "rapidfuzz>=3.0.0",
    "faiss-cpu>=1.7.0", # gpu version doesn't work 
    "numba>=0.56.0",
    "fastembed>=0.6.1",
]

full = [
    "sentence-transformers>=3.0.0",
    "fastembed>=0.6.1",
    "torch>=2.0.0",
    "faiss-cpu>=1.7.0",
    "rapidfuzz>=3.0.0",
    "numba>=0.56.0",
    "transformers>=4.20.0",
    "openai>=1.0.0",
    "google-generativeai>=0.3.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "scikit-learn>=1.0.0",
    "umap-learn>=0.5.0",
    "plotly>=5.0.0",
]

fuzzy = [
    "rapidfuzz>=3.0.0",
    "numba>=0.56.0",
]

cloud = [
    "openai>=1.0.0",
    "google-generativeai>=0.3.0",
    "rapidfuzz>=3.0.0",
]

performance = [
    "numba>=0.56.0",
    "faiss-cpu>=1.7.0",
    "rapidfuzz>=3.0.0",
    "fastembed>=0.6.1",
]

recommended = [
    "fastembed>=0.6.1",
    "rapidfuzz>=3.0.0",
    "numba>=0.56.0",
    "openai>=1.0.0",
    "google-generativeai>=0.3.0",
]

dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "twine>=4.0.0",
    "build>=0.10.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "sentence-transformers>=3.0.0",
    "fastembed>=0.6.1",
    "rapidfuzz>=3.0.0",
    "numba>=0.56.0",
    "openai>=1.0.0",
    "google-generativeai>=0.3.0",
]

plot = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "scikit-learn>=1.0.0",
    "umap-learn>=0.5.0",
    "plotly>=5.0.0",
]

experimental = [
    "chromadb>=0.4.0", 
]

profiling = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
    "matplotlib>=3.5.0",
    "psutil>=5.8.0",
]


[project.urls]
homepage = "https://github.com/saketkc/alethia"
repository = "https://github.com/saketkc/alethia"
documentation = "https://github.com/saketkc/alethia#readme"
bugs = "https://github.com/saketkc/alethia/issues"
changelog = "https://github.com/saketkc/alethia/blob/master/CHANGELOG.md"

[project.scripts]
alethia = "alethia.cli:main"

# UPDATED PACKAGE CONFIGURATION FOR DATA FILES
[tool.setuptools]
packages = ["alethia", "alethia.data"]

[tool.setuptools.package-data]
# Specify data files for the alethia.data package
"alethia.data" = ["*.csv", "*.json", "*.yml", "*.yaml"]
# OR more specifically for just your MTEB file:
# "alethia.data" = ["mteb_dashboard.csv"]

# If you want to include other data files in the main package:
# "alethia" = ["*.yml", "*.yaml", "config/*.json"]

# MANIFEST.in alternative (if you need more control)
# You can also create a MANIFEST.in file in your project root:
# include alethia/data/*.csv
# include alethia/data/*.json
# recursive-include alethia/data *

# Ruff configuration for linting
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "YTT", # flake8-2020
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "N803",  # argument name should be lowercase (for API compatibility)
    "N806",  # variable in function should be lowercase (for API compatibility)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"**/test_*.py" = ["N802", "N803"]  # Allow uppercase in test functions

# Black configuration for code formatting
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Mypy configuration for type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
disable_error_code = "attr-defined"

[[tool.mypy.overrides]]
module = [
    "fastembed.*",
    "sentence_transformers.*",
    "faiss.*",
    "rapidfuzz.*",
    "numba.*",
    "umap.*",
    "chromadb.*",
    "openai.*",
    "google.generativeai.*",
    "google.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*google.generativeai.*:UserWarning",
    "ignore:.*openai.*:UserWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "api: marks tests that require API keys", 
    "gpu: marks tests that require GPU",
    "integration: marks integration tests",
]

[tool.coverage.run]
source = ["alethia"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "if not.*_AVAILABLE:",
]
